// Auto-generated by avdl-compiler v1.3.3 (https://github.com/keybase/node-avdl-compiler)
//   Input file: simple.avdl

package simple1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
)


type GetRes struct {
	Dummy	string	`codec:"dummy" json:"dummy"`
	Buf	[]byte	`codec:"buf" json:"buf"`
}

type GetArg struct {
	Key	string	`codec:"key" json:"key"`
	Len	int	`codec:"len" json:"len"`
}

type PutArg struct {
	Key	string	`codec:"key" json:"key"`
	Len	int	`codec:"len" json:"len"`
	Buf	[]byte	`codec:"buf" json:"buf"`
}

type SimpleInterface interface {
	Get(context.Context, GetArg) (GetRes,error)
	Put(context.Context, PutArg) (error)
}

func SimpleProtocol(i SimpleInterface) rpc.Protocol {
	return rpc.Protocol {
		Name: "simple.1.Simple",
		Methods: map[string]rpc.ServeHandlerDescription{
			"Get": {
				MakeArg: func() interface{} {
					ret := make([]GetArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetArg)(nil), args)
						return
					}
					ret, err = i.Get(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"Put": {
				MakeArg: func() interface{} {
					ret := make([]PutArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PutArg)
					if !ok {
						err = rpc.NewTypeError((*[]PutArg)(nil), args)
						return
					}
					err = i.Put(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type SimpleClient struct {
	Cli rpc.GenericClient
}

func (c SimpleClient) Get(ctx context.Context, __arg GetArg) (res GetRes,err error) {
	err = c.Cli.Call(ctx, "simple.1.Simple.Get", []interface{}{__arg}, &res)
	return
}

func (c SimpleClient) Put(ctx context.Context, __arg PutArg) (err error) {
	err = c.Cli.Call(ctx, "simple.1.Simple.Put", []interface{}{__arg}, nil)
	return
}
